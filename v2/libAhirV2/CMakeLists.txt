cmake_minimum_required(VERSION 2.8)

include(${CMAKE_CURRENT_SOURCE_DIR}/../antlr2.cmake)
message(STATUS "Antlr library: ${Antlr_LIBRARIES}")
add_definitions(-std=c++98)

ADD_ANTLR_GRAMMAR(
    ${CMAKE_CURRENT_SOURCE_DIR}/grammar/vc.g
    VC_GRAMMAR_OUTPUT_FILES VC_GRAMMAR_HTML_FILES
    )

#add_library(vc_parser ${VC_GRAMMAR_OUTPUT_FILES})
## set_target_properties(vc_parser PROPERTIES COMPILE_FLAGS -fPIC)
#set_source_files_properties(${VC_GRAMMAR_OUTPUT_FILES} PROPERTIES GENERATED TRUE)

file(GLOB LIBVC_SRC src/*.cpp)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../BGLWrap/include)

add_library(VC SHARED ${LIBVC_SRC} ${VC_GRAMMAR_OUTPUT_FILES})
# set_target_properties(VC PROPERTIES COMPILE_FLAGS -fPIC)
target_link_libraries(VC) #${Antlr_LIBRARIES})

add_executable(vcParse util/vcParseMain.cpp)
target_link_libraries(vcParse VC antlr) 

add_executable(vcAnalyze util/vcAnalyze.cpp)
target_link_libraries(vcAnalyze VC antlr)

add_executable(vcFormat util/vcFormat.cpp)
target_link_libraries(vcFormat VC antlr) 

add_executable(vhdlFormat util/vhdlFormat.cpp)
target_link_libraries(vhdlFormat VC antlr)

add_executable(vc2vhdl util/vc2vhdl.cpp)
target_link_libraries(vc2vhdl VC antlr) 

# INSTALL
install(TARGETS VC vcParse vcAnalyze vcFormat vhdlFormat vc2vhdl
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION bin
    )

install(FILES ${VC_GRAMMAR_HTML_FILES} 
    DESTINATION share/doc/ahir
    )
